#

# Glue buildfile that "pulls" the tests and examples.
#
import tests = libbuild2-kconfig-tests/ kconfig-hello/
./: $tests


# Export mutilble targets in build2
# file      : build/export.build
# license   : MIT; see accompanying LICENSE file

if ($import.target == exe{b})
{
  $out_root/
  {
    include build2/
  }

  export $out_root/build2/exe{b}
}
else
{
  $out_root/
  {
    include libbuild2/
  }

  d = [dir_path] $out_root/libbuild2/
  if ($name($import.target) != 'build2')
  {
    # Assume one of the modules.
    #
    d += $regex.replace($name($import.target), '^build2-(.+)', '\1')
  }

  export $d/$import.target
}










#include and case swtiching
import libs = liblkc%lib{lkc}

./: exe{kconfig-conf} doc{README.md} legal{LICENSE} manifest

getopt = ($c.target.class == 'windows' && $c.target.system != 'mingw32')

exe{kconfig-conf}: {h c}{*} $libs testscript
exe{kconfig-conf}: getopt/{h c}{getopt}: include = $getopt

if $getopt
  c.poptions =+ "-I($src_base/getopt)"

# Disable warnings.
#
switch $c.class
{
  case 'gcc'
    c.coptions += -Wno-extra -Wno-error

  case 'msvc'
    c.coptions += /w
}

# Adhoc recipies
# @@ This is temporary until we package Qt.
#
if ($build.host.class != 'windows')
{
  # This is how the Linux kernel does it. Of course, there is no guarantee
  # that moc we find this way matches the libraries we import below. But it's
  # definitely an improvement over just importing moc since in that case we
  # are as likely to end up with the Qt4 version.
  #
  moc = exe{([dir_path] $process.run(pkg-config --variable=host_bins Qt5Core))/moc}
}
else
{
  import! moc = qt5%exe{moc}
}

import libs  = qt5%lib{Qt5Core}
import libs += qt5%lib{Qt5Gui}
import libs += qt5%lib{Qt5Widgets}
import libs += liblkc%lib{lkc}

./: exe{kconfig-qconf} doc{README.md} legal{LICENSE} manifest

exe{kconfig-qconf}: {hxx cxx}{qconf} cxx{qconf-moc} {h c}{images} \
  h{lkc expr} $libs

cxx{qconf-moc}: hxx{qconf} $moc
{{
  diag moc ($<[0])
  $moc -o $path($>) $path($<[0])
}}

# @@ Need to investigate why.
#
obj{qconf qconf-moc}: cc.reprocess = true

cc.poptions =+ "-I$out_base" "-I$src_base"

# Disable warnings.
#
switch $cxx.class
{
  case 'gcc'
    cc.coptions += -Wno-extra -Wno-error

  case 'msvc'
    cc.coptions += /w
}








# Another Adhoc recipie example
# from kconfig

import? flex  = flex%exe{flex}
import? bison = bison%exe{bison}

define y: file
y{*}: extension = y

define l: file
l{*}: extension = l

windows = ($c.target.class == 'windows')

lib{lkc}: {h c}{* -menu -parser.tab... -lexer.lex... -version} \
          {h c}{parser.tab...} c{lexer.lex...} h{version}
lib{lkc}: c{menu}:            include = adhoc # Included by parser.y.
lib{lkc}: regex/{h c}{regex}: include = $windows
libs{lkc}: def{lkc}:          include = $windows

if ($flex != [null] && $bison != [null])
{
  # Note: the kernel's makefile (Makefile.host) always passes -t (instrument
  # the parser for tracing) and -l/-L (don't generate #line directives). It's
  # not clear whether/why we would want the same. To start let's keep them
  # (we've confirmed -t doesn't seem to have any effect on performance).
  #
  #
  <{h c}{parser.tab...}>: y{parser} $bison
  {{
    diag bison ($<[0])
    $bison "--defines=$path($>[0])" "--output=$path($>[1])" -t -l $path($<[0])
  }}

  c{lexer.lex...}: l{lexer} h{parser.tab...} $flex
  {{
    diag flex ($<[0])
    $flex -o $path($>) -L $path($<[0])
  }}

  {h c}{parser.tab...} c{lexer.lex...}:
  {
    # Include the generated files into the distribution and don't remove them
    # when cleaning in src (so that clean results in a state identical to
    # distributed).
    #
    dist  = true
    clean = ($src_root != $out_root)

    # Backlink in the source directory for convenience of development.
    #
    backlink = true
  }
}

def{lkc}: h{lkc lkc_proto}
{{
  diag gen $>
  d = $path($>)
  h = $path($<)
  echo '; Auto-generated, do not edit.' >$d
  echo 'EXPORTS'                       >>$d

  # Functions:
  #
  # 1. Get rid of inline function prototypes.
  # 2. Extract names from function prototypes.
  # 3. Filter out _*-names and add leading spaces.
  #
  #
  cat $h                                                    | \
    sed    -e 's/.+ inline .+//'                            | \
    sed -n -e 's/^[a-z][^(]+ \*?([a-z0-9_]+)\(.*[;,]$/\1/p' | \
    sed -n -e 's/^([^_].+)$/  \1/p'                         >>$d

  # Variables:
  #
  # 1. Extract names from extern variable declarations (can be an array).
  # 2. Add leading spaces and trailing DATA.
  #
  cat $h                                                     | \
    sed -n -e 's/^extern .+ \*?([a-z0-9_]+)(\[.+\])?;$/\1/p' | \
    sed -n -e 's/^(.+)$/  \1 DATA/p'                         >>$d
}}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
h{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
c.poptions =+ "-I$out_root" "-I$src_root" "-I$out_base" "-I$src_base"

if $windows
  c.poptions =+ "-I($src_base/regex)"

# Make autoconfig support disabled by default.
#
c.poptions += -DKCONFIG_AUTOCONFIG=NULL

obja{*}: c.poptions += -DLIBLKC_STATIC_BUILD
objs{*}: c.poptions += -DLIBLKC_SHARED_BUILD

regex/obj{regex}: c.poptions += -DSTDC_HEADERS -DREGEX_MALLOC

# Disable warnings.
#
switch $c.class
{
  case 'gcc'
  {
    c.coptions += -Wno-extra -Wno-error

    if $windows
      c.coptions += -Wno-deprecated-declarations
  }

  case 'msvc'
    c.coptions += /w
}
# Export options.
#
# Note: -I$*_root should be sufficient since public headers do not include
#       generated headers.
#
lib{lkc}:  c.export.poptions = "-I$out_root" "-I$src_root"
liba{lkc}: c.export.poptions += -DLIBLKC_STATIC
libs{lkc}: c.export.poptions += -DLIBLKC_SHARED
# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{lkc}: bin.lib.version = @"-$version.project_id"
else
  lib{lkc}: bin.lib.version = @"-$version.major.$version.minor"
# Install only the public headers and into the liblkc/ subdirectory of, say,
# /usr/include/ recreating subdirectories.
#
h{*}: install = false
h{lkc}@./ h{lkc_proto}@./ h{expr}@./ h{list}@./ h{export}@./ h{version}:
{
  install         = include/liblkc/
  install.subdirs = true
}









#
##
###
#Embedding binary in files
import! xxd = xxd%exe{xxd}

<{hxx cxx}{foo}>: file{foo.bin} $xxd
{{
  diag xxd ($<[0])

  i = $path($<[0]) # Input.
  h = $path($>[0]) # Output header.
  s = $path($>[1]) # Output source.
  n = $name($<[0]) # Array name.

  # Get the position of the last byte (in hex).
  #
  $xxd -s -1 -l 1 $i | sed -n -e 's/^([0-9]+):.*$/\1/p' - | set pos

  if ($empty($pos))
    exit "unable to extract input size from xxd output"
  end

  # Write header and source.
  #
  echo "#pragma once"                         >$h
  echo "extern const char $n[0x$pos + 1];"   >>$h
  echo "extern const char $n[0x$pos + 1]= {"  >$s
  $xxd -i <$i                                >>$s
  echo '};'                                  >>$s
}}











###
#Linking on embeded systems

obje{foo}: cxx{foo}
obje{bar}: cxx{bar}

<exe{test} file{test.map}>: obje{foo bar}
{{
  diag ld ($>[0])
  $cxx.path $cc.loptions $cxx.loptions $cxx.mode -o $path($>[0]) \
    "-Wl,-Map=$path($>[1])" $path($<) $cxx.libs $cc.libs
}}




















#
intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import impl_libs += build2%lib{build2} # Implied interface dependency.

import? flex  = flex%exe{flex}
import? bison = bison%exe{bison}

define y: file
y{*}: extension = y

define l: file
l{*}: extension = l

getopt = ($c.target.class == 'windows' && $c.target.system != 'mingw32')

lib{build2-kconfig}: {hxx ixx txx cxx}{**} $impl_libs $intf_libs

lib{build2-kconfig}: {h c}{* -parser.tab... -lexer.lex... -menu -conf} \
                     {h c}{parser.tab...} c{lexer.lex...}
lib{build2-kconfig}: c{menu}: include = adhoc # Included by parser.y.
lib{build2-kconfig}: c{conf}: include = adhoc # Included by confapi.c.
lib{build2-kconfig}: getopt/h{getopt}: include = $getopt

if ($flex != [null] && $bison != [null])
{
  # Note: the kernel's makefile (Makefile.host) always passes -t (instrument
  # the parser for tracing) and -l/-L (don't generate #line directives). It's
  # not clear whether/why we would want the same. To start let's keep them
  # (we've confirmed -t doesn't seem to have any effect on performance).
  #
  #
  <{h c}{parser.tab...}>: y{parser} $bison
  {{
    diag bison ($<[0])
    $bison "--defines=$path($>[0])" "--output=$path($>[1])" -t -l $path($<[0])
  }}

  c{lexer.lex...}: l{lexer} h{parser.tab...} $flex
  {{
    diag flex ($<[0])
    $flex -o $path($>) -L $path($<[0])
  }}

  {h c}{parser.tab...} c{lexer.lex...}:
  {
    # Include the generated files into the distribution and don't remove them
    # when cleaning in src (so that clean results in a state identical to
    # distributed).
    #
    dist  = true
    clean = ($src_root != $out_root)

    # Backlink in the source directory for convenience of development.
    #
    backlink = true
  }
}

# Build options.
#
cc.poptions =+ "-I$out_root" "-I$src_root" "-I$src_base"

if $getopt
  c.poptions =+ "-I($src_base/getopt)"

# Disable autoconfig support.
#
cc.poptions += -DKCONFIG_AUTOCONFIG=NULL -DKCONFIG_REGEX=0

obja{*}: cc.poptions += -DLIBBUILD2_KCONFIG_STATIC_BUILD
objs{*}: cc.poptions += -DLIBBUILD2_KCONFIG_SHARED_BUILD

# Disable warnings in Kconfig code.
#
switch $c.class
{
  case 'gcc'
  {
    c.coptions += -Wno-extra -Wno-error

    if ($c.target.class == 'windows')
      c.coptions += -Wno-deprecated-declarations
  }

  case 'msvc'
    c.coptions += /w
}
# Export options.
#
lib{build2-kconfig}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}
liba{build2-kconfig}: cxx.export.poptions += -DLIBBUILD2_KCONFIG_STATIC
libs{build2-kconfig}: cxx.export.poptions += -DLIBBUILD2_KCONFIG_SHARED
# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{build2-kconfig}: bin.lib.version = @"-$version.project_id"
else
  lib{build2-kconfig}: bin.lib.version = @"-$version.major.$version.minor"
# Embed the build system core version as our load suffix.
#
libs{build2-kconfig}: bin.lib.load_suffix = "-$build.version.interface"
# Install into the libbuild2/kconfig/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
# And don't install kconfig C headers (implementation details).
#
h{*}: install = false

{hxx ixx txx}{*}:
{
  install         = include/libbuild2/kconfig/
  install.subdirs = true
}























#
#
define cli: file
cli{*}: extension = cli

# Note that the .css files are embedded into the generated .xhtml so we treat
# them as file{} rather than doc{}.
#
define css: file
css{*}: extension = css

define xhtml: doc
xhtml{*}: extension = xhtml

import? [metadata] cli = cli%exe{cli}

# Note that we include all the generated files into the distribution and don't
# remove them when cleaning in src (so that clean results in a state identical
# to distributed).

# Generate the manual if the cli program is available and handle (install,
# distribute, etc) the pre-generated files otherwise, if present.
#
if ($cli != [null])
{
  ./: xhtml{build2-kconfig-manual}

  xhtml{build2-kconfig-manual}: cli{manual} ../file{COPYRIGHT}          \
                                xhtml{doc-prologue doc-epilogue} css{*} \
                                $cli
  {
    dist  = true
    clean = ($src_root != $out_root)
    backlink = true
  }
  {{
    diag cli $> : ($<[0]) # @@ TMP: revise

    # Note that the date change doesn't change the script semantics, thus the
    # variable is defined locally.
    #
    date +"%B %Y" | set date

    sed -n -e 's/^Copyright \(c\) (.+ the build2 authors).*/\1/p' $path($<[1]) | \
      set copyright

    # Note that --html-suffix is used for man links.
    #
    $cli --generate-html                           \
         -v date="$date"                           \
         -v version="$version.project_id"          \
         -v series="$version.major.$version.minor" \
         -v copyright="$copyright"                 \
         -v license=GPLv2                          \
         --link-regex '%bdep([-.].+)%https://build2.org/bdep/doc/bdep$1%' \
         --link-regex '%b(#.+)?%https://build2.org/build2/doc/build2-build-system-manual.xhtml$1%' \
         --html-suffix .xhtml                      \
         --html-prologue-file $path($<[2])         \
         --html-epilogue-file $path($<[3])         \
         --stdout $path($<[0]) >$path($>)
  }}
}
else
  # Distribute both the pre-generated file (if present) and the sources.
  #
  ./: xhtml{+build2-kconfig-manual} \
      cli{manual} xhtml{doc-prologue doc-epilogue} css{*}

xhtml{*-prologue *-epilogue}: install = false
